{"version":3,"file":"static/js/715.497f2979.chunk.js","mappings":"2IAAO,MAAMA,UAA0BC,OAYvC,SAASC,EAAgBC,GACrB,IAAIC,EAASD,EAAIE,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAClD,OAAQD,EAAOE,OAAS,GACpB,KAAK,EACD,MACJ,KAAK,EACDF,GAAU,KACV,MACJ,KAAK,EACDA,GAAU,IACV,MACJ,QACI,MAAM,IAAIH,MAAM,8CAExB,IACI,OAxBR,SAA0BE,GACtB,OAAOI,mBAAmBC,KAAKL,GAAKE,QAAQ,OAAQ,CAACI,EAAGC,KACpD,IAAIC,EAAOD,EAAEE,WAAW,GAAGC,SAAS,IAAIC,cAIxC,OAHIH,EAAKL,OAAS,IACdK,EAAO,IAAMA,GAEV,IAAMA,IAErB,CAgBeI,CAAiBX,EAC5B,CACA,MAAOY,GACH,OAAOR,KAAKJ,EAChB,CACJ,CA9BAJ,EAAkBiB,UAAUC,KAAO,oB,aCInC,MAgDA,EAhDuBC,KACrB,MAgBMC,EAAqBC,IACzBC,MAAM,2CAA4C,CAChDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,MAAOP,MAE/BQ,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IACJC,QAAQC,IAAI,mBAAoBF,KAKjCG,MAAOC,IACNH,QAAQG,MAAM,SAAUA,MAI5B,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CACVC,UAxCiBC,IACrB,MAAMrB,EAAUqB,EAAmBC,WACnCV,QAAQC,IAAI,mBAAoBb,GAGhC,MAAMuB,EDqBH,SAAmBhB,EAAOiB,GAC7B,GAAqB,kBAAVjB,EACP,MAAM,IAAI5B,EAAkB,6CAEhC6C,IAAYA,EAAU,CAAC,GACvB,MAAMC,GAAyB,IAAnBD,EAAQE,OAAkB,EAAI,EACpCC,EAAOpB,EAAMqB,MAAM,KAAKH,GAC9B,GAAoB,kBAATE,EACP,MAAM,IAAIhD,EAAkB,0CAA0C8C,EAAM,KAEhF,IAAII,EACJ,IACIA,EAAUhD,EAAgB8C,EAC9B,CACA,MAAOG,GACH,MAAM,IAAInD,EAAkB,qDAAqD8C,EAAM,MAAMK,EAAEC,WACnG,CACA,IACI,OAAO1B,KAAK2B,MAAMH,EACtB,CACA,MAAOC,GACH,MAAM,IAAInD,EAAkB,mDAAmD8C,EAAM,MAAMK,EAAEC,WACjG,CACJ,CC5C4BE,CAAUjC,GAClCY,QAAQC,IAAI,qBAAsBU,GAGlCxB,EAAkBC,IAgCdkC,QA7BcC,KAClBvB,QAAQC,IAAI,sB","sources":["../node_modules/jwt-decode/build/esm/index.js","components/GoogleLoginAPI.js"],"sourcesContent":["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","// src/components/GoogleLoginAPI.js\r\nimport React from 'react';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\n\r\nconst GoogleLoginAPI = () => {\r\n  const handleSuccess = (credentialResponse) => {\r\n    const idToken = credentialResponse.credential;\r\n    console.log(\"Google ID Token:\", idToken);\r\n\r\n    // 디코딩된 사용자 정보 확인 (클라이언트 측에서 참고용)\r\n    const decodedUserInfo = jwtDecode(idToken);\r\n    console.log(\"Decoded User Info:\", decodedUserInfo);\r\n\r\n    // ID 토큰을 백엔드 서버로 전송\r\n    sendTokenToServer(idToken);\r\n  };\r\n\r\n  const handleError = () => {\r\n    console.log('Login Failed');\r\n  };\r\n\r\n  const sendTokenToServer = (idToken) => {\r\n    fetch('http://localhost:8080/member/auth/google', { // Spring Boot 서버의 엔드포인트\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ token: idToken }),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log('Server response:', data);\r\n      // 서버로부터 받은 자체 토큰(JWT 등)을 저장하는 로직\r\n      // 예: localStorage.setItem('userToken', data.token);\r\n      // 로그인 성공 후 페이지 이동 등\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error:', error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Google 로그인</h2>\r\n      <GoogleLogin\r\n        onSuccess={handleSuccess}\r\n        onError={handleError}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleLoginAPI;"],"names":["InvalidTokenError","Error","base64UrlDecode","str","output","replace","length","decodeURIComponent","atob","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","prototype","name","GoogleLoginAPI","sendTokenToServer","idToken","fetch","method","headers","body","JSON","stringify","token","then","response","json","data","console","log","catch","error","_jsxs","children","_jsx","GoogleLogin","onSuccess","credentialResponse","credential","decodedUserInfo","options","pos","header","part","split","decoded","e","message","parse","jwtDecode","onError","handleError"],"sourceRoot":""}